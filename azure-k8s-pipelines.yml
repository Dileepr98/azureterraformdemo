# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Terraform - Install'
  inputs:
    terraformVersion: '0.14.7'

- task: TerraformTaskV1@0
  displayName: 'Terraform - Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    commandOptions: '-input=false'
    backendServiceArm: 'Free Trial (2ee6da9b-a647-401e-9408-ab64ec71fb25)'
    backendAzureRmResourceGroupName: 'k8sdemorg'
    backendAzureRmStorageAccountName: 'k8sterraformstorage'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'
- task: TerraformTaskV1@0
  displayName: 'Terraform - Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    commandOptions: '-input=false -var-file="terraform.tfvars"'
    environmentServiceNameAzureRM: 'Free Trial(2ee6da9b-a647-401e-9408-ab64ec71fb25)'
- task: TerraformCLI@0
  displayName: 'Terraform - validate'
  inputs:
    command: 'validate'
    allowTelemetryCollection: true
    
- task: TerraformTaskV1@0
  displayName: 'Terraform - Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: '-input=false -auto-approve -var-file="terraform.tfvars"'
    environmentServiceNameAzureRM: 'Free Trial(2ee6da9b-a647-401e-9408-ab64ec71fb25)'
- task: TerraformCLI@0
  condition: failed()
  inputs:
    command: 'destroy'
    environmentServiceName: 'Free Trial(2ee6da9b-a647-401e-9408-ab64ec71fb25)'
    allowTelemetryCollection: true
